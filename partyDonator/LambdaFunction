//This code goes to 'https://eu-west-1.console.aws.amazon.com/lambda/home?region=eu-west-1#/functions/bonabona?tab=code'
//you should set the server's region to eu west (Ireland)

var https = require('https')

exports.handler = (event, context) => {

  try {

    if (event.session.new) {
      // New Session
      console.log("NEW SESSION")
    }

    switch (event.request.type) {

      case "LaunchRequest":
        // Launch Request
        console.log(`LAUNCH REQUEST`)
        context.succeed(
          generateResponse(
            buildSpeechletResponse("What would you want me to do?", false),
            {}
          )
        )
        break;

      case "IntentRequest":
        // Intent Request
        console.log(`INTENT REQUEST`)
        
        switch(event.request.intent.name)
        {
            case "SetPaypalAccount":
                context.succeed(
                    generateResponse(
                    buildSpeechletResponse("Go to the computer and introduce you username and password.", true),
                    {}
                    )
                )
                break;
            
            case "GetDeadline":
                context.succeed(
                    generateResponse(
                    buildSpeechletResponse("remember, don't be late. Take care!", true),
                    {}
                    )
                )
                break;
            
            case "CameBack":
                context.succeed(
                    generateResponse(
                    buildSpeechletResponse("welcome home", true),
                    {}
                    )
                )
                break; 
                
             default:
                throw "Invalid intent"
            
        }
        
        break;

        
      case "SessionEndedRequest":
        // Session Ended Request
        console.log(`SESSION ENDED REQUEST`)
        break;

      default:
       context.fail(`INVALID REQUEST TYPE: ${event.request.type}`)

    }

  } catch(error) { context.fail(`Exception: ${error}`) }

}

// Helpers
buildSpeechletResponse = (outputText, shouldEndSession) => {

  return {
    outputSpeech: {
      type: "PlainText",
      text: outputText
    },
    shouldEndSession: shouldEndSession
  }

}

generateResponse = (speechletResponse, sessionAttributes) => {

  return {
    version: "1.0",
    sessionAttributes: sessionAttributes,
    response: speechletResponse
  }

}